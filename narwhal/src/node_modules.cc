// Copyright 2009 Kris Kowal <kris@cixar.com> MIT License
// constructs a "primed" modules object for injection
// into a JavaScript module loader.

#include <node_modules.h>

#include <node_system.h>
#include <node_os.h>
#include <node_events.h>
#include <node_file.h>
#include <node_net.h>
#include <node_http.h>
#include <node_dns.h>
#include <node_stat.h>
#include <node_stdio.h>
#include <node_timer.h>
#include <node_child_process.h>
#include <node_signal_handler.h>
#include <node_constants.h>

using namespace node;
using namespace v8;

void NodeModulesInitialize(Handle<Object> modules);

Local<Object> Modules::New(int argc, char **argv, char **environ) {
  HandleScope scope;
  Local<Object> modules = Object::New();
  Modules::Initialize(modules, argc, argv, environ);
  return scope.Close(modules);
}

void Modules::Initialize(
    Handle<Object> modules,
    int argc, char **argv,
    char **environ) {
  NodeModulesInitialize(modules);

  Handle<Object> system_module = Object::New();
  System::Initialize(system_module, argc, argv, environ);
  modules->Set(String::NewSymbol("system"), system_module);

  Handle<Object> file_module = Object::New();
  modules->Set(String::NewSymbol("file-engine"), file_module);

  Handle<Object> os_module = Object::New();
  Os::Initialize(os_module);
  modules->Set(String::NewSymbol("os-engine"), os_module);

  Handle<Object> events_engine_module = Object::New();
  modules->Set(String::NewSymbol("events-engine"), events_engine_module);

}

void NodeModulesInitialize(Handle<Object> modules) {
  HandleScope scope;

  Handle<Object> node_constants_module = Object::New();
  Constants::Initialize(node_constants_module);
  modules->Set(String::NewSymbol("node/constants"), node_constants_module);

  // this is a prerequisite for almost everything
  Handle<Object> node_events_module = Object::New();
  Local<FunctionTemplate> node_event_emitter = FunctionTemplate::New();
  EventEmitter::Initialize(node_event_emitter);
  node_events_module->Set(String::NewSymbol("EventEmitter"),
      node_event_emitter->GetFunction());
  // must come after EventEmitter::Initialize:
  Events::Initialize(node_events_module);
  modules->Set(String::NewSymbol("node/events"), node_events_module);

  Handle<Object> node_file_module = Object::New();
  File::Initialize(node_file_module);
  modules->Set(String::NewSymbol("node/file"), node_file_module);

  Handle<Object> node_net_module = Object::New();
  Server::Initialize(node_net_module);
  // must come after Server:
  Connection::Initialize(node_net_module);
  modules->Set(String::NewSymbol("node/net"), node_net_module);

  Handle<Object> node_http_module = Object::New();
  // must come after Server/Connection:
  HTTPServer::Initialize(node_http_module);
  // must come after Server:
  HTTPConnection::Initialize(node_http_module);
  modules->Set(String::NewSymbol("node/http"), node_http_module);

  Handle<Object> node_stat_module = Object::New();
  Stat::Initialize(node_stat_module);
  modules->Set(String::NewSymbol("node/stat"), node_stat_module);

  Handle<Object> node_stdio_module = Object::New();
  Stdio::Initialize(node_stdio_module);
  modules->Set(String::NewSymbol("node/stdio"), node_stdio_module);

  Handle<Object> node_timer_module = Object::New();
  Timer::Initialize(node_timer_module);
  modules->Set(String::NewSymbol("node/timer"), node_timer_module);

  Handle<Object> node_child_process_module = Object::New();
  ChildProcess::Initialize(node_child_process_module);
  modules->Set(String::NewSymbol("node/child-process"),
      node_child_process_module);

  Handle<Object> node_signal_handler_module = Object::New();
  SignalHandler::Initialize(node_signal_handler_module);
  modules->Set(String::NewSymbol("node/signal-handler"),
      node_signal_handler_module);

  Handle<Object> node_dns_module = Object::New();
  DNS::Initialize(node_dns_module);
  modules->Set(String::NewSymbol("node/dns"), node_dns_module);

}

